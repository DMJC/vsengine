/*
 * GeneralListPicker.java
 *
 * Created on January 20, 2007, 8:37 PM
 */

package campaigneditor.display;

import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle;

/**
 *
 * @author  Daniel Aleksandrow
 */
public class GeneralListPicker extends javax.swing.JPanel {
    private PickerType selecttype;
    private Object[] selectable;
    public enum PickerType { FiniteSelection, InfiniteSelection };
    /**
     * Creates new form GeneralListPicker 
     */
    public GeneralListPicker(String label, Object[] selectable, Object[] selected, PickerType selecttype)
    {
        initComponents();
        this.selectable = selectable;
        this.stringArgLabel.setText(label);
        this.selectedItemList.setModel(new DefaultListModel());
        this.selecttype = selecttype;
        this.setSelected(selected);
    }
    /* Adds the objects to the combo list iff the selection space is finite. */
    private void pushToCombo(Object[] objects)
    {
        if (this.selecttype == PickerType.FiniteSelection)
        {
            for (Object object : objects)
            {
                this.addToCombo(object);
            }
        }
    }
    private void refreshCombo(Object[] selected)
    {
        this.availableItemCombo.removeAllItems();
        boolean notselected = true;
        for (Object selectabl : this.selectable)
        {
            if (this.selecttype == PickerType.FiniteSelection)
            {
                for (Object selecte : selected)
                {
                    System.out.println("Comparing "+selecte+" : "+selectabl+" -> "+selecte.equals(selectabl));
                    if (selecte.equals(selectabl))
                    {
                        notselected = false;
                        break;
                    }
                }
            }
            if (notselected || this.selecttype == PickerType.InfiniteSelection)
            {
                this.addToCombo(selectabl);
            }
            else
            {
                notselected = true;
            }
        }
    }
    public void setLabel(String label)
    {
        this.stringArgLabel.setText(label);
    }
    private void addToCombo(Object object)
    {
        this.availableItemCombo.addItem(object);
    }

    /* Removes selected combo list objects iff the selection space is finite. */
    private Object popSelectedFromCombo()
    {
        Object added = this.availableItemCombo.getSelectedItem();
        System.out.println(added);
        if (this.selecttype == PickerType.FiniteSelection)
        {
            this.availableItemCombo.removeItem(added);
        }
        return added;
    }
    private void addToList(Object object)
    {
        try
        {
            DefaultListModel listmodel = (DefaultListModel) this.selectedItemList.getModel();
            listmodel.addElement(object);
        }
        catch (Exception e)
        {
            System.out.println("Couldn't add.");
        }
    }
    public void setSelected(Object[] objects)
    {
        this.selectedItemList.removeAll();
        for (Object object : objects)
        {
            this.addToList(object);
        }
        this.refreshCombo(objects);
    }
    public Object[] getSelected()
    {
        Object[] objects = new Object[this.selectedItemList.getModel().getSize()];
        for (int i = 0 ; i < this.selectedItemList.getModel().getSize() ; i++)
        {
            objects[i] = this.selectedItemList.getModel().getElementAt(i);
        }
        return objects;
    }
    private Object[] popSelectedFromList()
    {
        try
        {
            Object[] removed = this.selectedItemList.getSelectedValues();
            DefaultListModel listmodel = (DefaultListModel) this.selectedItemList.getModel();
            for (Object object : removed)
            {
                listmodel.removeElement(object);
            }
            return removed;
        }
        catch (Exception e)
        {
            System.out.println("Couldn't remove.");
            return new Object[0];
        }
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        stringArgLabel = new javax.swing.JLabel();
        availableItemCombo = new javax.swing.JComboBox();
        addItemButton = new javax.swing.JButton();
        removeItemButton = new javax.swing.JButton();
        selectedItemPane = new javax.swing.JScrollPane();
        selectedItemList = new javax.swing.JList();
        selectedItemListLabel = new javax.swing.JLabel();
        availableItemComboLabel = new javax.swing.JLabel();

        stringArgLabel.setText("Argument Label");

        availableItemCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        addItemButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/campaigneditor/resources/node-new.png")));
        addItemButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addItemButtonMouseClicked(evt);
            }
        });

        removeItemButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/campaigneditor/resources/node-delete.png")));
        removeItemButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                removeItemButtonMouseClicked(evt);
            }
        });

        selectedItemList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        selectedItemPane.setViewportView(selectedItemList);

        selectedItemListLabel.setText("Selected Items:");

        availableItemComboLabel.setText("Available Items:");

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(selectedItemListLabel)
                            .addComponent(selectedItemPane, GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(removeItemButton, GroupLayout.PREFERRED_SIZE, 28, GroupLayout.PREFERRED_SIZE)
                            .addComponent(addItemButton, GroupLayout.PREFERRED_SIZE, 28, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(availableItemCombo, 0, 142, Short.MAX_VALUE)
                            .addComponent(availableItemComboLabel)))
                    .addComponent(stringArgLabel))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(stringArgLabel)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(availableItemComboLabel)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(addItemButton, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)
                            .addComponent(availableItemCombo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeItemButton, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(selectedItemListLabel)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectedItemPane, GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void removeItemButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeItemButtonMouseClicked
        this.pushToCombo(this.popSelectedFromList());
    }//GEN-LAST:event_removeItemButtonMouseClicked

    private void addItemButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addItemButtonMouseClicked
        this.addToList(this.popSelectedFromCombo());
    }//GEN-LAST:event_addItemButtonMouseClicked
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addItemButton;
    private javax.swing.JComboBox availableItemCombo;
    private javax.swing.JLabel availableItemComboLabel;
    private javax.swing.JButton removeItemButton;
    private javax.swing.JList selectedItemList;
    private javax.swing.JLabel selectedItemListLabel;
    private javax.swing.JScrollPane selectedItemPane;
    private javax.swing.JLabel stringArgLabel;
    // End of variables declaration//GEN-END:variables
    
}
